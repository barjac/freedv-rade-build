#!/bin/bash
# Clean stale entried from /etc/ld.so.preload

run_as_root() {
    if [ $# -eq 0 ]; then
        echo "run_as_root: No command provided." >&2
        return 1
    fi

    # Join arguments safely into a single command string
    local CMD="$*"

    if command -v sudo >/dev/null 2>&1; then
        if sudo -n true 2>/dev/null; then
            echo "Running as root via sudo"
            sudo bash -c "$CMD"
            return $?
        elif sudo -v >/dev/null 2>&1; then
            echo "Running as root via sudo (with password prompt)"
            sudo bash -c "$CMD"
            return $?
        fi
    fi

    if command -v su >/dev/null 2>&1; then
        echo "Running as root via su"
        su -c "$CMD"
        return $?
    fi

    echo "Unable to gain root access via sudo or su." >&2
    return 1
}

# Clean up stale LD_PRELOAD entries (e.g., libgtk3-nocsd.so.0)
clean_ld_preload() {
    local preload="/etc/ld.so.preload"
    [ ! -f "$preload" ] && return 0

    echo "Checking for stale LD_PRELOAD entries in $preload..."

    local tmpfile
    tmpfile=$(mktemp) || return 1
    local changed=0

    while IFS= read -r line; do
        # skip empty/comment lines
        [ -z "$line" ] || [[ "$line" =~ ^# ]] && { echo "$line" >> "$tmpfile"; continue; }

        if [ -e "$line" ]; then
            echo "$line" >> "$tmpfile"
        else
            echo "Removing stale preload entry: $line"
            changed=1
        fi
    done < "$preload"

    if [ $changed -eq 1 ]; then
        run_as_root "cp '$preload' '${preload}.bak' && cp '$tmpfile' '$preload'"
        echo "Updated $preload (backup saved as ${preload}.bak)"
    else
        echo "No stale entries found in $preload."
    fi

    rm -f "$tmpfile"
}

clean_ld_preload
