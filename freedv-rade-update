#!/bin/bash
#set -x

# Set default branch
default="v2.0-dev"

confirm() {
params=( "$@" )
rval=4
while [ $rval -gt 3 ];do
    echo -ne "${params[0]} ${params[1]} "
    ans=
    rval=
    read -r ans
        case "$ans" in
            [${params[2]}])
                rval=0
                ;;
            [${params[3]}])
                rval=1
                ;;
	        [${params[4]}])
                rval=2
                ;;
            [${params[5]}])
                rval=3
                ;;
            *)
                rval=4
                ;;
        esac
done
    return $rval
}

fastupdt() {
cd freedv-rade/freedv-gui || exit 1
    if (( ${#prbranch} > 0 )); then
        if git checkout "$prbranch" | grep -q "error:"; then
            echo -e "\nError finding $prbranch - closing.\n"
            exit 1
        fi
    fi
# Check branch etc. up to date
git pull
source ./rade-venv/bin/activate
cd build_linux || exit 1
if ! [[ -h model19_check3 ]]; then
    ln -s "$(pwd)"/rade_src/model19_check3 model19_check3
fi
PYTHONPATH="$(pwd)/rade_src:$PYTHONPATH" make
cd || exit 1
}
clear
echo "Wait a moment..."

# Check we are not root
((UID)) || { echo "You must NOT be root user to run $0, use CTRL/d to become $USER"; exit 1; }

# Check we have internet and DNS
ping -c3 google.com > /dev/null || { echo "Failed to find internet connection or DNS"; exit 1; }

# Do all from user's home folder
cd || exit 1

# Check that freedv-rade-build is there
[[ -d freedv-rade-build ]] || { echo -e "The freedv-rade-build folder is missing!\nFollow the instructions in the README #at:\nhttps://github.com/barjac/freedv-rade-build\n"; exit 1; }

# Preamble
clear
echo "################## Welcome to freedv-rade-update ######################"
echo -e "\n This script is for maintaining a build of FreeDV RADE development version\n \
created using freedv-rade-build script.\n"
echo -e "It will optionally:\n \
* Update FreeDV to the latest $default head or a specific branch/tag/commit#. (fast, recommended) \n \
* Fully rebuild FreeDV from scratch (runs freedv-rade-build). \n \
* Create a backup of the current version in use.\n \
* Restore from a previous backup.\n\n\
Nothing will be done until you finally confirm after the summary."

# Check if there is already a backup and flag it
[[ -d freedv-rade_bak ]] && bak=1

if (( bak == 1 )); then
    if confirm "\nDo you want to (U)pdate, (F)ull re-build, (B)ackup or (R)estore from an existing backup?" "[U/F/B/R]" "Uu" "Ff" "Bb" "Rr"; then
        fastupdt=1
    elif (( rval == 1 )); then
        update=1
    elif (( rval == 2 )); then 
        backup=1
    elif (( rval == 3 )); then
        restore=1
    fi
else
    if confirm "\nDo you want to (U)pdate, (F)ull re-build  or (B)ackup?" "[U/F/B]" "Uu" "Ff" "Bb"; then
        fastupdt=1
    elif (( rval == 1 )); then
        update=1
    elif (( rval == 2 )); then 
        backup=1
    fi
fi
#debug
#echo "U=$fastupdt F=$update B=$backup R=$restore"
#exit 0
if (( fastupdt == 1 )) && confirm "\n\nUse a specific branch/tag/commit?" "[Y/N]" "yY" "nN"; then
    echo ""
    read -r -p "Enter branch, tag or commit# :" prbranch
fi
# Default branch
    (( ${#prbranch} == 0 )) && prbranch="$default"

if ( (( fastupdt == 1 )) || (( update == 1 )) || (( backup = 1 )) ) && (( bak != 1 )) && (( restore != 1 )); then
# Ask to backup with the current version
    echo -e "\nYou currently have no backup of FreeDV."
    if confirm "\nCreate a backup of the current version?" "[Y/N]" "Yy" "Nn";then
         backup=1
        # Check we have space
        (( $(df -hBG --output=avail /home |tr '\n' ' '|tr -s ' '|cut -d ' ' -f2|cut -dG -f1) > 3 )) || { echo -e "\nInsufficient disk space for backup"; backup=0; }
    fi
fi
if (( bak == 1 )) && (( restore != 1 )); then
    echo -e "\nYou already have a backup of a previous FreeDV build."
    if confirm "Replace the current backup with a new one of the current version?" "[Y/N]" "Yy" "Nn"; then
        backup=1
        overwrite=1
    else
        backup=0
    fi
fi
# Debug
#echo "U=$fastupdt F=$update B=$backup R=$restore prbranch=$prbranch"
# Summary of what will be done
if (( fastupdt == 1 )) || (( update == 1 )) || (( backup == 1 )) || (( restore == 1 )); then
    echo -e "\n\nSummary of selected tasks:"
    echo -e "###########################\n"
    if (( backup == 1 )) ; then
        if (( bak == 1 )); then 
            if (( overwrite == 1 )); then
                echo "A new backup will be created overwriting the old backup."
            else
                echo "A new backup will be created."
            fi
        else
            echo "A backup will be created."
        fi
    elif (( restore != 1 )); then 
        echo "No backup will be created."
    fi

    if (( fastupdt == 1 )); then
        echo "FreeDV will be updated to $prbranch"
    fi

    if (( update == 1 )); then 
        echo "FreeDV will be fully re-built from ${default}."
    fi

    if (( restore == 1 )); then
        echo -e "FreeDV will be restored from your current backup which will remain in place.\nThis will overwrite your current version."
    fi

    if confirm "\nPerform the selected tasks?" "[Y/N]" "Yy" "Nn";then

# Create backup
        if (( backup == 1)); then
            echo -e "\nCreating backup..."
            rm -rf freedv-rade_bak/
            if cp -rf freedv-rade/ freedv-rade_bak; then
                echo "Backup complete."
            else
                echo "Backup failed."
                exit 1
            fi
        fi

# Fast update
        if (( fastupdt == 1 )); then
            echo -e "\nStarting fast update in 5 seconds to ${prbranch}."
            sleep 5
            if fastupdt; then
                echo "Update complete"
            else
                echo "Update failed"
                exit 1
            fi
        fi

# Restore from backup
        if (( restore == 1)); then
            echo -e "\nRestoring from backup..."
            if (rm -rf freedv-rade/ && cp -rf freedv-rade_bak/ freedv-rade); then
                echo "Restore complete."
            else
                echo "Restore failed."
            fi
        fi

# Full re-build
        if (( update == 1 )); then 
            echo -e "\nStarting full rebuild in 5 seconds. Please be patient this will take some time ..."
            sleep 5
            freedv-rade-build/freedv-rade-build
        fi
    else
        echo -e "\nAborting then - bye! :("
        exit 0
    fi
else
    echo -e "\nNothing to do - bye! :)"
    exit 0
fi
