#!/bin/bash
#set -x

#   Remove old log
    rm -f ~/freedv-rade-build/freedv-rade-update.log || { echo "Failed to remove old log"; exit 1; }

# Get user
user="$(logname 2>/dev/null || echo "$USER")"

# Start logging
    cat /etc/os-release > ~/freedv-rade-build/freedv-rade-update.log
    exec > >(tee -a ~/freedv-rade-build/freedv-rade-update.log)
    exec 2>&1

# Set default branch
default="master"
prbranch=""
pname=""
cname=""

# Get path of base dir in use, defaults to /home/$user
if cat /home/${user}/freedv-rade-build/freedv-rade-build.cfg |grep -v '^[#]'|grep -q "basedir="; then
    basedir=$(cat /home/${user}/freedv-rade-build/freedv-rade-build.cfg|grep -v '^[#]'|grep 'basedir='|cut -d= -f2)
else
    basedir=/home/$user
fi

confirm() {
params=( "$@" )
rval=7
while (( $rval > 6 )); do
    echo -ne "${params[0]} ${params[1]} "
    ans=
    rval=
    read -r ans
    # Get first option if ans is empty
    ans=${ans:-$(echo ${params[1]} | cut -b 2)}
    echo $ans
        case "$ans" in
            [${params[2]}])
                rval=0
                ;;
            [${params[3]}])
                rval=1
                ;;
            [${params[4]}])
                rval=2
                ;;
            [${params[5]}])
                rval=3
                ;;
            [${params[6]}])
                rval=4
                ;;
            [${params[7]}])
                rval=5
                ;;
            [${params[8]}])
                rval=6
                ;;
            *)
                rval=7
                ;;
        esac
done
    return $rval
}

fastupdt() {
cd ${basedir}/freedv-rade/freedv-gui || exit 1

# Remove any patched/edited files
git reset --hard

git switch $default || { echo "ERROR: switching to $default"; exit 1; }

git pull

    if (( ${#prbranch} > 0 )); then
        if git checkout "$prbranch" | grep -q "error:"; then
            echo -e "\nError finding $prbranch - closing.\n"
            exit 1
        fi
        git pull
    fi

# Apply a patches if there are any
if (( ${#patches[@]} > 0 )); then
    for patch in "${patches[@]}"; do
    echo "Applying $patch"
    if ! patch -p1 < /home/${user}/freedv-rade-build/$patch; then
#    echo $(pwd)
        echo "$patch failed to apply.  pwd= $(pwd)"
        exit 1
    fi
    done
fi

# Use a specific commit
if (( ${#cname} > 0 )); then
    if ! git checkout --detach $cname; then
        echo "ERROR: Can't find that git#"
        exit 1
    fi
fi

source ./rade-venv/bin/activate
cd build_linux || exit 1
if ! [[ -h model19_check3 ]]; then
    ln -s "$(pwd)"/rade_src/model19_check3 model19_check3
fi
PYTHONPATH="$(pwd)/rade_src:$PYTHONPATH" make
cd || exit 1
}

bye() {
echo -e "\nClosing - Bye! :)"
sleep 2
exit 0
}

# Main routine ###################
clear
cd ~/freedv-rade-build
branch="$(git status|grep 'On branch')"
echo "Wait a moment..."

# Check we are not root
((UID)) || { echo "ERROR: You must NOT be root user to run $0, use CTRL/d to become $user"; exit 1; }

# Check we have internet and DNS
ping -c3 google.com > /dev/null || { echo "ERROR: Failed to find internet connection or DNS"; exit 1; }

# Do all from user's home folder even if base dir is elsewhere
cd || exit 1

# Check that freedv-rade-build is there
[[ -d freedv-rade-build ]] || { echo -e "ERROR: The freedv-rade-build folder is missing!\nFollow the instructions in the README #at:\nhttps://github.com/barjac/freedv-rade-build\n"; exit 1; }

# Preamble
clear
echo "############### Welcome to freedv-rade-update ################ ($branch)"
echo -e "\n This script is for maintaining a build of FreeDV RADE \n \
created using freedv-rade-build script.\n"
echo -e "It will optionally:\n \
* Update FreeDV to the latest $default or a specified branch (fast, recommended) \n \
* Fully rebuild FreeDV from scratch (runs freedv-rade-build). \n \
* Create a backup of the current version in use.\n \
* Restore from a previous backup.\n \
* Switch backup with current \n \
* Create a new FreeDV-RADE desktop file.\n \
* Quit the program.\n\n\
************** Nothing will be done until you finally confirm after the summary *************

TIP: Hitting ENTER without typing will automatically select the first option to questions."

# Check if there is already a backup and flag it
[[ -d ${basedir}/freedv-rade_bak ]] && bak=1

if (( bak == 1 )); then
    confirm "\nDo you want to (U)pdate, (F)ull re-build, (B)ackup, (R)estore from backup, (S)witch backup/current, Create (D)esktop launcher or (Q)uit?" "[U/F/B/R/S/D/Q]" "Uu" "Ff" "Bb" "Rr" "Ss" "Dd" "Qq"
        case $rval in
            0)
            fastupdt=1
            ;;
            1)
            update=1
            ;;
            2)
            backup=1
            ;;
            3)
            restore=1
            ;;
            4)
            switch=1
            ;;
            5)
            desktop=1
            ;;
            6)
            bye
            ;;
        esac
else
        confirm "\nDo you want to (U)pdate, (F)ull re-build,  (B)ackup, create (D)esktop launcher or (Q)uit?" "[U/F/B/D/Q]" "Uu" "Ff" "Bb" "Dd" "qQ"
        case $rval in
            0)
            fastupdt=1
            ;;
            1)
            update=1
            ;;
            2)
            backup=1
            ;;
            3)
            desktop=1
            ;;
            4)
            bye
            ;;
        esac
fi

if (( fastupdt == 1 )) && confirm "\n\nUse a specific branch or tag?" "[N/y]" "yY" "nN"; then
    echo ""
    read -r -p "Enter branch/tag name:" prbranch
fi
# Use default branch if non entered
    (( ${#prbranch} == 0 )) && prbranch="$default"

if (( fastupdt == 1 )) && confirm "\n\nAdd patch(es)?" "[N/y]" "yY" "nN"; then
    echo -e  "\n NOTE: Patch files must be in /home/$user/freedv-rade/build/ folder"
    patches=()
        while true; do
            read -rp "Enter a patch filename (or press Enter to finish): " file
            [[ -z "$file" ]] && break
            patches+=("$file")
        done
fi

if (( fastupdt == 1 )) && confirm "\n\nUse a specific commit?" "[N/y]" "yY" "nN"; then
    read -r -p "Enter the commit git#:" cname
fi

# Check patch exists
(( ${#pname} > 0 )) && [[ -z /home/$user/freedv-rade-build/$pname ]] && { echo "ERROR: Non existant or invalid patch name"; exit 1; }


if ( (( fastupdt == 1 )) || (( update == 1 )) || (( backup = 1 )) ) && (( desktop != 1 )) && (( bak != 1 )) && (( restore != 1 )) && (( switch != 1 )); then
# Ask to backup with the current version
    echo -e "\nYou currently have no backup of FreeDV-RADE."
    if confirm "\nCreate a backup of the current version?" "[N/y]" "Yy" "Nn"; then
         backup=1
        # Check we have space
        (( $(df -hBG --output=avail $basedir |tr '\n' ' '|tr -s ' '|xargs|cut -d ' ' -f2|cut -dG -f1) > 3 )) || { echo -e "\nInsufficient disk space for backup"; backup=0; }
    fi
fi
if (( bak == 1 )) && (( restore != 1 )) && (( desktop != 1 )) && (( switch != 1 )); then
    echo -e "\nYou already have a backup of a previous FreeDV build."
    if confirm "Replace the current backup with a new one of the current version?" "[N/y]" "Yy" "Nn"; then
        backup=1
        overwrite=1
    else
        backup=0
    fi
fi

# Debug
#echo "U=$fastupdt F=$update B=$backup R=$restore S=$switch D=$desktop prbranch=$prbranch"
# Summary of what will be done
if (( fastupdt == 1 )) || (( update == 1 )) || (( backup == 1 )) || (( restore == 1 )) || (( desktop == 1 )) || (( switch == 1 )); then
    echo -e "\n\nSummary of selected tasks:"
    echo -e "###########################\n"
    if (( backup == 1 )) ; then
        if (( bak == 1 )); then 
            if (( overwrite == 1 )); then
                echo "A new backup will be created overwriting the old backup."
            else
                echo "A new backup will be created."
            fi
        else
            echo "A backup will be created."
        fi
    fi

    if (( fastupdt == 1 )); then
        updt_str="built at $prbranch"

        if (( ${#patches[@]} > 0 )); then
            updt_str="$updt_str and patched with ${patches[@]}"
        fi

        if (( ${#cname} >0 )); then
            updt_str="$updt_str at commit $cname"
        fi
        echo "FreeDV will be $updt_str"
    fi

    if (( update == 1 )); then 
        echo "FreeDV will be fully re-built from latest $default"
    fi

    if (( restore == 1 )); then
        echo -e "FreeDV will be restored from your current backup which will remain in place.\nThis will overwrite your current version."
    fi

    if (( switch == 1 )); then
        echo -e "The current version will be switched with the one in backup and vice versa"
    fi

    if (( desktop == 1 )); then
        echo -e "A new FreeDV-RADE desktop file (Icon) will be added to your desktop unless\n \
 a file named 'Freedv-RADE.desktop already exists (maybe re-name it?)."
    fi

    if confirm "\nPerform the selected tasks?" "[Y/n]" "Yy" "Nn"; then

# Create backup
        if (( backup == 1)); then
            echo -e "\nCreating backup..."
            rm -rf ${basedir}/freedv-rade_bak/
            if cp -rf ${basedir}/freedv-rade/ ${basedir}/freedv-rade_bak; then
                echo "Backup complete."
            else
                echo "Backup failed."
                exit 1
            fi
        fi

# Fast update
        if (( fastupdt == 1 )); then
            echo -e "\nStarting fast update in 3 seconds to latest ${prbranch}."
            sleep 3
            if fastupdt; then
                echo "Update complete"
            else
                echo "Update failed"
                exit 1
            fi
        fi

# Restore from backup
        if (( restore == 1 )); then
            echo -e "\nRestoring from backup..."
            if (rm -rf ${basedir}/freedv-rade/ && cp -rf ${basedir}/freedv-rade_bak/ ${basedir}/freedv-rade); then
                echo "Restore complete."
            else
                echo "Restore failed."
            fi
        fi

# Switch backup with current
		if (( switch == 1 )); then
			echo -e "\nSwitching backup with current..."
			[[ -d ${basedir}/freedv-rade_tmp ]] && rm -fr ${basedir}/freedv-rade_tmp

			mv ${basedir}/freedv-rade ${basedir}/freedv-rade_tmp || { echo "Failed to move freedv-rade to freedv-rade_tmp"; exit 1; }
			mv ${basedir}/freedv-rade_bak ${basedir}/freedv-rade || { echo "Failed to move freedv-rade_bak to freedv-rade"; exit 1; }
			mv ${basedir}/freedv-rade_tmp ${basedir}/freedv-rade_bak ||{ echo "Failed to move freedv-rade_tmp to freedv-rade_bak"; exit 1; }
			echo -e "\nDone :)\n"
		fi

# Full re-build
        if (( update == 1 )); then 
            echo -e "\nStarting full rebuild in 3 seconds. Please be patient this will take some time ..."
            sleep 3
            freedv-rade-build/freedv-rade-build
        fi
# Desktop file
        if (( desktop == 1 )); then
            freedv-rade-build/mk-desktop
        fi

        bye
    fi
else
    bye
fi
