#!/bin/bash

confirm() {
params=( "$1" "$2" "$3" "$4" "$5" )
rval=3
while ((rval > 2));do
    echo -ne "${params[0]} ${params[1]} "
    ans=
    rval=
    IFS= read -r -n1 ans
    if [ -z "$ans" ] || ((${#ans} > 1)); then
        ((rval=3))
    else
        case "$ans" in
            [${params[2]}]*)
                rval=0
                ;;
            [${params[3]}]*)
                rval=1
                ;;
            [${params[4]}]*)
                rval=2
                ;;
            *)
                rval=3
                ;;
        esac
    fi
done
return $rval
}

# Check we are not root
((UID)) || { echo "You must NOT be root user to run $0, use CTRL/d to become $USER"; exit 1; }

# Check we have internet and DNS
ping -c3 google.com > /dev/null || { echo "Failed to find internet connection or DNS"; exit 1; }

# Do all from user's home folder
cd

# Check that freedv-rade-build is there
[[ -d freedv-rade-build ]] || { echo -e "The freedv-rade-build folder is missing!\nFollow the instructions in the README #at:\nhttps://github.com/barjac/freedv-rade-build\n"; exit 1; }

# Preamble
clear
echo "################## Welcome to freedv-rade-update ######################"
echo -e "\n This script is for maintaining a build of FreeDV RADE development version\n \
created using freedv-rade-build script.\n"
echo -e "It will optionally:\n * Update FreeDV to a new commit by rebuilding it\n * Create a backup of the current version in use.\n * Restore from a previous backup."

# Check if there is already a backup and flag it
[[ -d freedv-rade_bak ]] && bak=1

if (( bak == 1 )); then
    if confirm "\nDo you want to (U)pdate, (B)ackup or (R)estore from an existing backup?" "[U/B/R]" "Uu" "Bb" "Rr"; then
        update=1
    elif (( $? == 1 )); then
        backup=1
    else 
        restore=1
    fi
else
    if confirm "\nDo you want to (U)pdate or (B)ackup?" "[U/B]" "Uu" "Bb"; then
        update=1
    else 
        backup=1
    fi
fi
#echo -e "\nupdt=$update,back=$backup,rest=$restore"

if ((( update == 1 )) || (( backup = 1 ))) && (( bak != 1 )) && (( restore != 1 )); then
# Ask to backup with the current version
    echo "You currently have no backup of FreeDV."
    if confirm "\nCreate a backup of the current version?" "[Y/N]" "Yy" "Nn";then
         backup=1
         
        # Check we have space
        (( $(df -hBG --output=avail /home |tr '\n' ' '|tr -s ' '|cut -d ' ' -f2|cut -dG -f1) > 2 )) || { echo -e "\nInsufficient disk space for backup"; backup=0; }
    fi
fi
if (( bak == 1 )) && (( restore != 1 )); then
    echo -e "\nYou already have a backup of a previous FreeDV build."
    if confirm "Overwrite the current backup with a new one of the current version?" "[Y/N]" "Yy" "Nn";then
        backup=1; overwrite=1
    else
        backup=
    fi
fi

# Summary of what will be done
if (( update == 1 )) || (( backup == 1 )) || (( restore == 1 )); then
    echo -e "\nSummary of selected tasks:"
    if (( backup == 1 )) ; then
        if (( bak == 1 )); then 
            if (( overwrite == 1 )); then
                echo "A new backup will be created overwriting the old backup."
            else
                echo "A new backup will be created."
            fi
        else
            echo "A backup will be created."
        fi
    else
        echo "No backup will be created."
    fi

    if (( update == 1 )); then 
        echo "FreeDV will be re-built from the current freedv-2.0-dev branch master."
    fi

    if (( restore == 1 )); then
        echo -e "FreeDV will be restored from your current backup which will remain in place.\nThis will overwrite your current version."
    fi

    if confirm "Perform the selected tasks?" "[Y/N]" "Yy" "Nn";then

# Create backup
        if (( backup == 1)); then
            echo -e "\nCreating backup..."
            rm -rf freedv-rade_bak/
            cp -rf freedv-rade/ freedv-rade_bak
            (( $? == 0 )) && echo "Backup complete."
        fi

# Restore from backup
        if (( restore == 1)); then
            echo -e "\nRestoring from backup..."
            rm -rf freedv-rade/
            cp -rf freedv-rade_bak/ freedv-rade
            (( $? == 0 )) && echo "Restore complete."
        fi

# Update
        if (( update == 1 )); then 
            echo -e "\nStarting update in 10 seconds. Please be patient this will take some time ..."
            sleep 10
            freedv-rade-build/freedv-rade-build
        fi
    else
        echo -e "\nAborting then - bye! :("
        exit 0
    fi
else
echo -e "\nNothing to do - bye! :)"
exit 0
fi
