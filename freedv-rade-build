#!/bin/bash
#set -x

# This script installs freedv RADE from github on various linux distributions
# A log file for debugging is automatically generated in ~/freedv-rade-build.

# Basic sanity checks
#================================

# Check we are not root
((UID)) || { echo "ERROR: You must NOT run $0 as root - aborting!"; exit 1; }

# Check for missing preload file
if [ -n "$LD_PRELOAD" ] && [ ! -e "$LD_PRELOAD" ]; then
    echo "Warning: LD_PRELOAD points to missing file ($LD_PRELOAD) â€” unsetting."
    unset LD_PRELOAD
fi

# Get user name
user="$(logname 2>/dev/null || echo "$USER")"

# Check that this is a 64bit machine
uname -m | grep -q "64" || { echo "ERROR: A 64bit system is needed"; exit 1; }

# Set run directory
RUN_DIR="/home/$user/freedv-rade-build"
echo "Current dir = $(pwd)"
echo "Changing to RUN_DIR"
cd "$RUN_DIR" || { echo "Switch to RUN_DIR failed"; exit 1; }

# Set full path to log
LOGFILE="$RUN_DIR/freedv-rade-build.log"

# Check not already running
echo "Checking for another instance"
exec 9>/tmp/radebuild.lock
flock -n 9 || { echo "Another instance is already running"; exit 1; }

# Detect restart flag and strip it from args
RESTARTING=false
if [[ "$1" == "--restart" ]]; then
    RESTARTING=true
    shift  # remove --restart so rest of script never sees it
    echo "--restart passed to script"
fi

# Only wipe log & write OS info on fresh run
if ! $RESTARTING; then
    cat /etc/os-release > "$LOGFILE"
    locale >> "$LOGFILE"

    # Append all output from here (logging set up only on fresh run)
    exec > >(tee -a "$LOGFILE")
    exec 2>&1
fi

echo " Script start: $(date)"

# Check we are in a git clone
[[ -d "$RUN_DIR/.git" ]] || { echo -e "ERROR: This does not look like a Git repo.\n\n \
Please read the instructions in README.md carefully and try again."; exit 1; }

# Check we have internet and DNS
ping -c3 google.com > /dev/null || { echo "Failed to find internet connection or DNS"; exit 1; }

# Self-update check
echo -e "Checking for updates to freedv-rade-build project in GitHub...\n"
if LC_ALL=C git pull --ff-only | grep -q -v "Already up to date"; then
    echo "Updated to newer freedv-rade-build from GitHub."
    echo "Releasing lock"
    flock -u 9 || { echo "Failed to release lock"; exit 1; }
    echo "Restarting now: $(date)"
    exec "$RUN_DIR/freedv-rade-build" --restart "$@"
fi

echo "Project is up to date with GitHub"

# Get/set path of base dir to use, defaults to /home/$user
if [[ -f /home/${user}/.freedv-rade-build.cfg ]]; then
    if cat /home/"${user}"/.freedv-rade-build.cfg|grep -v '^[#]'|grep -q "basedir="; then
        basedir=$(cat /home/"${user}"/.freedv-rade-build.cfg|grep -v '^[#]'|grep 'basedir='|cut -d= -f2)
    else
        basedir=/home/$user
    fi
else
    echo "basedir=/home/$user" > /home/"${user}"/.freedv-rade-build.cfg
    basedir=/home/$user
fi

# Check permissions on target dir
touch "${basedir}"/test_for_perms > /dev/null 2>&1 || { echo -e "Target folder $basedir is not writeable by $user\n check permissions on this directory it may need ownership changing.\n"; exit 1; }
rm -f "${basedir}"/test_for_perms

# Set default build dir name
builddir=freedv-rade

# Find out where we are
. /etc/os-release
clear
echo "****************Welcome to freedv-rade--build *****************"
echo -e "\nHello ${user}, you seem to be using ${PRETTY_NAME}\n"
echo -e "Installation will be made into ${basedir}/${builddir}\n"

run_as_root() {
    if [ $# -eq 0 ]; then
        echo "run_as_root: No command provided." >&2
        return 1
    fi

    # Join arguments safely into a single command string
    local CMD="$*"

    if command -v sudo >/dev/null 2>&1; then
        if sudo -n true 2>/dev/null; then
            echo "Running as root via sudo"
            sudo bash -c "$CMD"
            return $?
        elif sudo -v >/dev/null 2>&1; then
            echo "Running as root via sudo (with password prompt)"
            sudo bash -c "$CMD"
            return $?
        fi
    fi

    if command -v su >/dev/null 2>&1; then
        echo "Running as root via su"
        su -c "$CMD"
        return $?
    fi

    echo "Unable to gain root access via sudo or su." >&2
    return 1
}

groups_to_add=()

# Install some system deps
echo "Enter the root password if requested to install some initially needed dependencies"
case $ID in
#=================================
    mageia)
    groups_to_add+=(dialout)
    MGA_ID=$(echo "$VERSION_ID"|cut -d. -f1)
    if (( MGA_ID > 9 )); then
            run_as_root "urpmi --auto --no-recommends git cmake wxGTK3-devel libsamplerate-devel libsndfile-devel speexdsp-devel hamlib-devel alsa-lib-devel \
            libao-devel gsm-devel gcc-c++ automake sox python3-virtualenv pulseaudio-devel hamlib-utils python3 python3-devel \
            fonts-ttf-google-noto-emoji-color" || { echo "Deps install failed"; exit 1; }
    else
            run_as_root "urpmi --auto --no-recommends git cmake wxGTK3-devel libsamplerate-devel libsndfile-devel speexdsp-devel hamlib-devel alsa-lib-devel \
            libao-devel gsm-devel gcc-c++ automake sox python3-virtualenv pulseaudio-devel hamlib-utils python3 python3-devel \
            google-noto-emoji-color-fonts" || { echo \"Deps install failed\"; exit 1; }
    fi
    ;;
#=================================
    opensuse-tumbleweed)
    groups_to_add+=(dialout)
    echo "Enter the root password to install some initially needed dependencies"
    run_as_root "zypper --non-interactive in --no-recommends cmake patch automake autoconf libtool wxGTK3-devel libsamplerate-devel \
            libsndfile-devel speexdsp-devel alsa-lib-devel libao-devel libgsm-devel gcc-c++ sox python3-virtualenv \
            pulseaudio-devel python3 python3-devel hamlib hamlib-devel google-noto-coloremoji-fonts" \
            || { echo "Deps install failed"; exit 1; }
    ;;
#=================================
    linuxmint)
    groups_to_add+=(dialout plugdev)
    MINT_ID=$(echo "$VERSION_ID"|cut -d. -f1)
    if (( MINT_ID >= 22 )); then
            run_as_root "apt-get install -y --no-install-recommends libspeexdsp-dev libsamplerate0-dev sox git libwxgtk3.2-dev libhamlib-dev \
            libasound2-dev libao-dev libgsm1-dev libsndfile1-dev cmake module-assistant build-essential python3-venv libpulse-dev \
            autoconf libtool python3-numpy-dev python3 python3-dev libhamlib-utils automake fonts-noto-color-emoji" \
            || { echo "Deps install failed"; exit 1; }
    elif (( MINT_ID == 21 )); then
            run_as_root "apt-get install -y --no-install-recommends libspeexdsp-dev libsamplerate0-dev sox git libwxgtk3.0-gtk3-dev libhamlib-dev \
            libasound2-dev libao-dev libgsm1-dev libsndfile1-dev cmake module-assistant build-essential python3-venv libpulse-dev \
            autoconf libtool python3-numpy python3 python3-dev libhamlib-utils automake fonts-noto-color-emoji" \
            || { echo "Deps install failed"; exit 1; }
    else
        { echo "This Mint version is not yet supported, please create an isuue in github"; exit 1; }
    fi
    ;;
#=================================
    fedora)
    groups_to_add+=(dialout)
        FC_ID=$(echo "$VERSION_ID"|cut -d. -f1)
        if (( FC_ID == 42 )); then
            run_as_root "dnf5 install --setopt=install_weak_deps=False @development-tools git cmake wxGTK-devel libsamplerate-devel libsndfile-devel speexdsp-devel \
            hamlib-devel hamlib alsa-lib-devel libao-devel gsm-devel gcc-c++ sox python3-virtualenv pulseaudio-libs-devel libtool \
            python3-devel google-noto-emoji-color-fonts" \
            || { echo "Deps install failed"; exit 1; }
        elif (( FC_ID == 41 )); then
            run_as_root "dnf install --setopt=install_weak_deps=False @development-tools git cmake wxGTK-devel libsamplerate-devel \
            libsndfile-devel speexdsp-devel hamlib-devel hamlib alsa-lib-devel libao-devel gsm-devel gcc-c++ sox python3-virtualenv \
            pulseaudio-libs-devel libtool python3-devel google-noto-emoji-color-fonts" \
            || { echo "Deps install failed"; exit 1; }
        else
            { echo "This Fedora version is not yet supported, please create an isuue in github"; exit 1; }
        fi
    ;;
#=================================
    ubuntu)
    groups_to_add+=(dialout plugdev)
        UBUNTU_ID=$(echo "$VERSION_ID"|cut -d. -f1)
            echo "=== Starting apt-get update ==="
            run_as_root bash -c "DEBIAN_FRONTEND=noninteractive apt-get update" \
            || { echo "apt-get update FAILED"; exit 1; }
        if (( UBUNTU_ID >= 24 )); then
            echo "=== Starting dependency install ==="
            run_as_root "DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends libwxgtk3.2-dev python3-numpy-dev python3-venv libspeexdsp-dev libsamplerate0-dev sox git libhamlib-dev \
            libao-dev libasound2-dev libgsm1-dev libsndfile1-dev cmake module-assistant build-essential libpulse-dev autoconf libtool \
            python3 python3-dev libhamlib-utils fonts-noto-color-emoji automake" \
            || {
            echo "Dependency installation failed."
            exit 1
}
        elif (( UBUNTU_ID >= 22 )); then
            echo "=== Starting dependency install ==="
            run_as_root "DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends libwxgtk3.0-gtk3-dev python3-numpy python3-venv libspeexdsp-dev libsamplerate0-dev sox git libhamlib-dev \
            libasound2-dev libao-dev libgsm1-dev libsndfile1-dev cmake module-assistant build-essential libpulse-dev autoconf libtool \
            python3 python3-dev libhamlib-utils fonts-noto-color-emoji automake" \
            || {
            echo "Dependency installation failed."
            exit 1
}
        else
            { echo "This Ubuntu version is not yet supported, please create an isuue in github"; exit 1; }
        fi
    ;;
#=================================
    debian)
    groups_to_add+=(dialout plugdev)
    DEBIAN_ID=$(echo "$VERSION_ID"|cut -d. -f1)
        if (( DEBIAN_ID >= 12 )); then
            run_as_root "apt-get install libspeexdsp-dev libsamplerate0-dev sox git libwxgtk3.2-dev libhamlib-dev libasound2-dev libao-dev \
                libgsm1-dev libsndfile1-dev cmake module-assistant build-essential python3-venv libpulse-dev autoconf libtool \
                python3-numpy-dev python3-dev libhamlib-utils fonts-noto-color-emoji automake" \
                || { echo "Deps install failed"; exit 1; }
        elif (( DEBIAN_ID == 11 )); then
            run_as_root "apt-get install libspeexdsp-dev libsamplerate0-dev sox git libwxgtk3.0-gtk3-dev libhamlib-dev libasound2-dev libao-dev \
                libgsm1-dev libsndfile1-dev cmake module-assistant build-essential python3-venv libpulse-dev autoconf libtool \
                python3-numpy-dev python3-dev libhamlib-utils fonts-noto-color-emoji automake" \
                || { echo "Deps install failed"; exit 1; }
        else
            { echo "This Debian version is not yet supported, please create an isuue in github"; exit 1; }
        fi
    ;;
#=================================
    arch|garuda|endeavouros|arcolinux|rebornos)
    groups_to_add+=(uucp lock)
    run_as_root "pacman -Syu cmake gcc base-devel autoconf libtool automake git \
        python python-numpy speexdsp libsamplerate sox hamlib alsa-lib libao \
        libsndfile gsm noto-fonts-emoji" \
        || { echo 'Deps install failed'; exit 1; }

        # Only install PulseAudio if not on PipeWire
    if pacman -Q pipewire-pulse &>/dev/null; then
        echo "Using PipeWire for audio â€“ skipping pulseaudio"
    else
        echo "Installing pulseaudio..."
        run_as_root "pacman -S pulseaudio"
    fi

    echo "Checking for wxWidgets GTK3 support..."

    # Check if wxwidgets-gtk3 is already installed
    if ! pacman -Q wxwidgets-gtk3 &>/dev/null; then
        echo "wxwidgets-gtk3 not found in pacman. Attempting AUR install..."

        # Detect yay or paru
        if command -v yay &>/dev/null; then
            yay -S --needed wxwidgets-gtk3 || { echo "AUR install failed with yay"; exit 1; }
        elif command -v paru &>/dev/null; then
            paru -S --needed wxwidgets-gtk3 || { echo "AUR install failed with paru"; exit 1; }
        else
            echo "No AUR helper (yay or paru) found. Please install wxwidgets-gtk3 manually."
            exit 1
        fi
    else
        echo "wxwidgets-gtk3 is already installed."
    fi
    ;;
#=================================
    manjaro)
    groups_to_add+=(uucp lock)
    run_as_root "pacman -S --needed cmake gcc base-devel autoconf automake libtool git python speexdsp libsamplerate sox \
    wxwidgets-gtk3 hamlib alsa-lib libao libsndfile python-virtualenv python-numpy manjaro-pulse gsm noto-fonts-emoji" \
    || { echo "Deps install failed"; exit 1; }
    ;;
#=================================
    pclinuxos)
    groups_to_add+=(dialout)
    # Detect wxWidgets 3.2 devel package name in PCLinuxOS
    detect_wx_pkg() {
    # Search the repo for anything matching wxgtku3.2-devel
    local pkg
    pkg=$(apt-cache search wxgtku3.2-devel | awk '{print $1}' | grep -m1 'wxgtku3.2-devel')
    if [[ -z "$pkg" ]]; then
        echo "Error: wxWidgets 3.2 development package not found in repo." >&2
        exit 1
    fi
    echo "$pkg"
    }
    WXPKG=$(detect_wx_pkg)
    echo "Using wxWidgets package: $WXPKG"
    run_as_root "apt-get install -y --fix-missing $WXPKG automake autoconf libtool git cmake libsamplerate-devel libsndfile-devel \
    speexdsp-devel alsa-lib-devel libao-devel gsm-devel gcc-c++ sox python3  python3-devel pulseaudio-devel readline-devel" \
    || { echo "Deps install failed - try again later"; exit 1; }
    ;;
#=================================
    gentoo)
    groups_to_add+=(dialout uucp)
    run_as_root "emerge --verbose --noreplace \
    dev-vcs/git dev-build/cmake dev-build/automake dev-build/autoconf dev-build/libtool x11-libs/wxGTK \
    media-libs/libsamplerate media-libs/libsndfile media-libs/speexdsp media-libs/hamlib media-libs/alsa-lib \
    media-libs/libao media-sound/gsm sys-devel/gcc media-sound/sox dev-python/virtualenv media-libs/libpulse \
    dev-lang/python dev-python/numpy media-fonts/noto-emoji" \
    || { echo "Deps install failed"; exit 1; }
    ;;
#=================================
    *)
    echo "Sorry $PRETTY_NAME is not yet supported."
    echo "Please create a github issue with details of your system."
    exit 0
    ;;
#=================================
esac

# Add the user to each required group, if not already a member

groups_added=()
for group in "${groups_to_add[@]}"; do
    if id "$user" | grep -qw "$group"; then
        echo "User $user is already in group $group"
    else
        echo "Adding $user to group $group"
        run_as_root "usermod -aG $group $user"  && groups_added+=$group
    fi
done

# Create a build directory
mkdir -p "${basedir}/${builddir}" || { echo "ERROR: mkdir ${basedir}/${builddir} failed"; exit 1; }

# Move into build dir
cd "${basedir}/${builddir}" || { echo "ERROR: cd to ${basedir}/${builddir} failed"; exit 1; }

# Delete freedv-gui directory
rm -rf "${basedir}/${builddir}/freedv-gui" || { echo "ERROR: removing old freedv-gui dir"; exit 1; }

# Check we have space in base directory
(( $(df -m --output=avail "${basedir}/${builddir}/" | tail -1) > 2500 )) || { echo -e "ERROR: You need more than 2.5GB free disk space in $basedir.\nYou only have $(df -m --output=avail "${basedir}/${builddir}" | tail -1)MB"; exit 1; }


# Get the latest freedv sources from github
echo Cloning freedv github repository...
git clone --progress https://github.com/drowe67/freedv-gui.git || { echo "ERROR: git clone failed, probably a network issue - try again later"; exit 1; }

# Move into source code directory
cd "${basedir}/${builddir}/freedv-gui" || { echo "ERROR: cd to freedv-gui failed"; exit 1; }

# Create a python virtual environment with access to system python modules
if [[ $ID == "debug" ]] || [[ $ID == "linuxmint" ]] || [[ $ID == "fedora" ]] || [[ $ID == "ubuntu" ]] || [[ $ID == "debian" ]] || [[ $ID = "pclinuxos" ]]; then
    python3 -m venv rade-venv --system-site-packages || { echo "ERROR: create venv failed"; exit 1; }
else
# Exclude system modules
    python3 -m venv rade-venv || { echo "ERROR: create venv failed"; exit 1; }
fi

# Activate it
. ./rade-venv/bin/activate || { echo "ERROR: activate venv failed"; exit 1; }

# Clear cache in venv
pip3 cache purge
pip3 install --upgrade pip || echo "WARNING: pip upgrade failed"

# Install some python dependencies using pip
pip3 install torch torchaudio --index-url https://download.pytorch.org/whl/cpu || { echo "torch pip install failed"; exit 1; }

pip3 install matplotlib || { echo "ERROR: matplotlib pip install failed"; exit 1; }

if [[ $ID == "mageia" ]] || [[ $ID == "linuxmint" ]] || [[ $ID == "fedora" ]] || [[ $ID == "ubuntu" ]] || [[ $ID == "debian" ]]; then
pip3 install NumPy || { echo "ERROR: numpy pip install failed"; exit 1; }
fi

# Testing patches for upstream script
#sed -i 's: -j$(nproc): -j4:' build_linux.sh
#patch -p1 < ../../freedv-rade-build/cores.patch && echo "cores.patch applied"

# Run the freedv build script
./build_linux.sh || { echo "ERROR: Build failed for some reason, check for errors above and run again later."; deactivate; exit 1; }

# Move back into build_linux
cd "${basedir}/${builddir}/freedv-gui/build_linux" || { echo "ERROR: cd ${basedir}/${builddir}/freedv-gui/build_linux failed"; exit 1; }

# Create symlink 
ln -s "$(pwd)"/rade_src/model19_check3 model19_check3 || { echo "Failed to create symlink"; exit 1; }

# Deactivate venv
deactivate || echo "WARNING:Issue deactivating venv"

# Make start script
~/freedv-rade-build/mk-start "${basedir}/${builddir}" || echo "WARNING: freedv-start script was not created (maybe exists?)"

# Make destop file
~/freedv-rade-build/mk-desktop || echo "WARNING: freedv desktop file was not created (maybe already exists?)"

# Make Update desktop file
~/freedv-rade-build/mk-updt-desktop || echo "WARNING: Update-RADE desktop file was not created (maybe already exists?)"

cd || exit 1
echo -e "\n\n########### Build is complete \o/ ############\n\nYou can run it from your home folder using:\n\n \
        ./freedv-start [-f configfile]\n\n  OR  use the FreeDV-RADE desktop icon.\n\n"

if (( ${#groups_added[@]} > 0 )) then
    echo -e "####  Your user has been added to ${groups_added[0]} group"
    if (( ${#groups_add[@]} == 2 )) then
    echo -e " and ${groups_added[1]} group"
    fi
echo -e ", please reboot before using FreeDV  ####"
fi
