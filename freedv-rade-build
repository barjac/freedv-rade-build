#!/bin/bash
# This script installs freedv RADE from github on various linux distributions
# Check we are not root
((UID)) || { echo "ERROR: You must NOT run $0 as root - aborting!"; exit 0; }

# Check that this is a 64bit machine
uname -m | grep -q "64" || { echo "ERROR: A 64bit system is needed"; exit 1; }

# Get/set path of base dir to use, defaults to /home/$USER
if [[ -f /home/${USER}/.freedv-rade-build.cfg ]]; then
    if cat /home/${USER}/.freedv-rade-build.cfg|grep -v '^[#]'|grep -q "basedir="; then
        basedir=$(cat /home/${USER}/.freedv-rade-build.cfg|grep -v '^[#]'|grep 'basedir='|cut -d= -f2)
    else
        basedir=/home/$USER
    fi
else
    echo "basedir=/home/$USER" > /home/${USER}/.freedv-rade-build.cfg
    basedir=/home/$USER
fi

# Check permissions on target dir
touch ${basedir}/test_for_perms > /dev/null 2>&1 || { echo -e "Target folder $basedir is not writeable by $USER\n check permissions on this directory it may need ownership changing.\n"; exit 1; }
rm -f ${basedir}/test_for_perms

# Set default build dir name
builddir=freedv-rade

# Check we have space
(( $(df -hBG --output=avail $basedir |tr '\n' ' '|tr -s ' '|xargs|cut -d ' ' -f2|cut -dG -f1) > 3 )) || { echo "ERROR: You will need more than 3GB of free disk space in $basedir"; exit 1; }

# Check we have internet and DNS
ping -c3 google.com > /dev/null || { echo "ERROR: Failed to find internet connection or DNS"; exit 1; }

# Find out where we are
. /etc/os-release
echo -e "\nHello ${USER}, you seem to be using ${PRETTY_NAME}\n"
echo -e "Installation will be made into ${basedir}/${builddir}\n"

# Install some system deps
case $ID in
    mageia)
    # Check Mageia version as google emoji fonts package changed name.
    echo "Enter the root password to install some initially needed dependencies"
    if [[ "$VERSION_ID" -gt "9" ]]; then
            su -c "urpmi git cmake wxGTK3-devel libsamplerate-devel libsndfile-devel speexdsp-devel hamlib-devel alsa-lib-devel \
            libao-devel gsm-devel gcc-c++ sox python3-virtualenv pulseaudio-devel hamlib-utils python3 python3-devel \
            fonts-ttf-google-noto-emoji-color" \
            || { echo "Deps install failed - try again later"; exit 1; }
    else
        su -c "urpmi git cmake wxGTK3-devel libsamplerate-devel libsndfile-devel speexdsp-devel hamlib-devel alsa-lib-devel \
            libao-devel gsm-devel gcc-c++ sox python3-virtualenv pulseaudio-devel hamlib-utils python3 python3-devel \
            google-noto-emoji-color-fonts" \
            || { echo "Deps install failed - try again later"; exit 1; }
    fi
    ;;
    opensuse-tumbleweed)
    echo "Enter the root password to install some initially needed dependencies"
    sudo zypper --non-interactive in --no-recommends cmake patch automake autoconf libtool wxGTK3-devel libsamplerate-devel \
            libsndfile-devel speexdsp-devel alsa-lib-devel libao-devel libgsm-devel gcc-c++ sox python3-virtualenv \
            pulseaudio-devel python3 python3-devel hamlib hamlib-devel google-noto-coloremoji-fonts \
            || { echo "Deps install failed - try again later"; exit 1; }
    ;;
    linuxmint)
    echo "Enter the root password to install some initially needed dependencies"
    sudo apt install libspeexdsp-dev libsamplerate0-dev sox git libwxgtk3.2-dev libhamlib-dev libasound2-dev libao-dev \
           libgsm1-dev libsndfile1-dev cmake module-assistant build-essential python3.12-venv libpulse-dev autoconf libtool \
           python3-numpy-dev python3 python3-dev libhamlib-utils fonts-noto-color-emoji \
           || { echo "Deps install failed - try again later"; exit 1; }
    ;;
    fedora)
    echo "Enter the root password to install some initially needed dependencies"
        if [[ "$VERSION_ID" -ge "42" ]]; then
            sudo dnf5 install @development-tools
            sudo dnf5 install git cmake wxGTK-devel libsamplerate-devel libsndfile-devel speexdsp-devel \
            hamlib-devel hamlib alsa-lib-devel libao-devel gsm-devel gcc-c++ sox python3-virtualenv pulseaudio-libs-devel libtool \
            python3-devel google-noto-emoji-color-fonts \
            || { echo "Deps install failed - try again later"; exit 1; }
        elif [[ "$VERSION_ID" -le "41" ]]; then
            sudo dnf group install development-tools
            sudo dnf install --setopt=install_weak_deps=False git cmake wxGTK-devel libsamplerate-devel libsndfile-devel speexdsp-devel \
            hamlib-devel hamlib alsa-lib-devel libao-devel gsm-devel gcc-c++ sox python3-virtualenv pulseaudio-libs-devel libtool \
            python3-devel google-noto-emoji-color-fonts \
            || { echo "Deps install failed - try again later"; exit 1; }
        fi
    ;;
    ubuntu)
    echo "Enter the root password to install some initially needed dependencies"
        if [[ "$VERSION_ID" == "24.04" ]]; then
            sudo apt install libwxgtk3.2-dev python3-numpy-dev python3.12-venv || { echo "Deps install failed - try again later"; exit 1; }
        elif [[ "$VERSION_ID" == "22.04" ]]; then
            sudo apt install libwxgtk3.0-gtk3-dev python3-numpy python3.10-venv || { echo "Deps install failed - try again later"; exit 1; }
        fi
            sudo apt install libspeexdsp-dev libsamplerate0-dev sox git libhamlib-dev libasound2-dev libao-dev \
                libgsm1-dev libsndfile1-dev cmake module-assistant build-essential libpulse-dev autoconf libtool \
                python3 python3-dev libhamlib-utils fonts-noto-color-emoji \
                || { echo "Deps install failed - try again later"; exit 1; }
    ;;
    debian)
    echo "Enter the root password to install some initially needed dependencies"
    su -c "apt install libspeexdsp-dev libsamplerate0-dev sox git libwxgtk3.2-dev libhamlib-dev libasound2-dev libao-dev \
           libgsm1-dev libsndfile1-dev cmake module-assistant build-essential python3.11-venv libpulse-dev autoconf libtool \
           python3-numpy-dev python3-dev libhamlib-utils fonts-noto-color-emoji" \
           || { echo "Deps install failed - try again later"; exit 1; }
    ;;
    arch)
    echo "Enter the root password to install some initially needed dependencies"
    su -c "pacman -S --needed cmake gcc base-devel autoconf libtool git python speexdsp libsamplerate sox \
            wxwidgets-gtk3 hamlib alsa-lib libao libsndfile python-virtualenv python-numpy pulseaudio gsm noto-color-emoji-fontconfig" \
            || { echo "Deps install failed - try again later"; exit 1; }
    ;;
    manjaro)
    echo "Enter the root password to install some initially needed dependencies"
    su -c "pacman -S --needed cmake gcc base-devel autoconf libtool git python speexdsp libsamplerate sox \
            wxwidgets-gtk3 hamlib alsa-lib libao libsndfile python-virtualenv python-numpy manjaro-pulse gsm noto-fonts-emoji" \
            || { echo "Deps install failed - try again later"; exit 1; }
    ;;
#    pclinuxos)  # Hamlib package seems unmaintained here and build from git currently fails.
#    echo "Enter the root password to install some initially needed dependencies"
#    su -c "apt install automake autoconf libtool git cmake wxgtku3.2-devel libsamplerate-devel libsndfile-devel \
#           speexdsp-devel alsa-lib-devel libao-devel gsm-devel gcc-c++ sox python3 \
#           python3-devel pulseaudio-devel" \
#           || { echo "Deps install failed - try again later"; exit 1; }
#    ;;
    *)
    echo "Sorry I don't have information for $PRETTY_NAME yet."
    echo "Please create an issue with details of your system."
    exit 0
    ;;
esac

# Create a build directory
mkdir -p ${basedir}/${builddir} || { echo "ERROR: mkdir ${basedir}/${builddir} failed"; exit 1; }

# Move into build dir
cd ${basedir}/${builddir} || { echo "ERROR: cd to ${basedir}/${builddir} failed"; exit 1; }

# Delete freedv-gui directory
rm -rf ${basedir}/${builddir}/freedv-gui || { echo "ERROR: removing old freedv-gui dir"; exit 1; }

# Get the latest freedv sources from github
echo Cloning freedv github repository...
git clone https://github.com/drowe67/freedv-gui.git || { echo "ERROR: git clone failed"; exit 1; }

# Move into source code directory
cd ${basedir}/${builddir}/freedv-gui || { echo "ERROR: cd to freedv-gui failed"; exit 1; }

# Change to the dev branch when available
#git switch v2.0.0 || { echo "ERROR: switch to v2.0-dev branch failed"; exit 1; }

# Create a python virtual environment with access to system python modules
if [[ $ID == "debug" ]] || [[ $ID == "linuxmint" ]] || [[ $ID == "fedora" ]] || [[ $ID == "ubuntu" ]] || [[ $ID == "debian" ]] || [[ $ID = "pclinuxos" ]]; then
    python3 -m venv rade-venv --system-site-packages || { echo "ERROR: create venv failed"; exit 1; }
else
# Exclude system modules
    python3 -m venv rade-venv || { echo "ERROR: create venv failed"; exit 1; }
fi

# Activate it
. ./rade-venv/bin/activate || { echo "ERROR: activate venv failed"; exit 1; }

# Clear cache in venv
pip cache purge
pip install --upgrade pip || echo "WARNING: pip upgrade failed"

# Install some python dependencies using pip
pip3 install torch torchaudio --index-url https://download.pytorch.org/whl/cpu || { echo "torch pip install failed"; exit 1; }

pip3 install matplotlib || { echo "ERROR: matplotlib pip install failed"; exit 1; }

if [[ $ID == "mageia" ]] || [[ $ID == "linuxmint" ]] || [[ $ID == "fedora" ]] || [[ $ID == "ubuntu" ]] || [[ $ID == "debian" ]]; then
pip3 install NumPy || { echo "ERROR: numpy pip install failed"; exit 1; }
fi
# Run the freedv build script
./build_linux.sh || { echo "ERROR: Build failed for some reason, check for errors above and run again later."; deactivate; exit 1; }

# Move back into build_linux
cd ${basedir}/${builddir}/freedv-gui/build_linux || { echo "ERROR: cd ${basedir}/${builddir}/freedv-gui/build_linux failed"; exit 1; }

# Create symlink 
ln -s "$(pwd)"/rade_src/model19_check3 model19_check3 || { echo "Failed to create symlink"; exit 1; }

# Deactivate venv
deactivate || echo "WARNING:Issue deactivating venv"

# Make start script
~/freedv-rade-build/mk-start ${basedir}/${builddir} || echo "WARNING: freedv-start script was not created (maybe exists?)"

# Make destop file
~/freedv-rade-build/mk-desktop || echo "WARNING: freedv desktop file was not created (maybe exists?)"

# Make Update desktop file
~/freedv-rade-build/mk-updt-desktop || echo "WARNING: Update-RADE desktop file was not created (maybe exists?)"

cd
echo -e "\n########### Build is complete \o/ ############\nYou can run it from your home folder using:\n \
      ./freedv-start [-f configfile]  OR  use the desktop FreeDV-RADE desktop icon."
