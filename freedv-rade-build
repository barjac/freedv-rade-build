#!/bin/bash
# This script installs freedv RADE from github on various linux distributions
# A log file for debugging is automatically generated in ~/freedv-rade-build.

# Check we are not root
((UID)) || { echo "ERROR: You must NOT run $0 as root - aborting!"; exit 1; }

#   Remove old log
    rm -f freedv-rade-build.log || { echo "Failed to remove old log"; exit 1; }

# Start logging
    cat /etc/os-release > freedv-rade-build.log
    exec > >(tee -a freedv-rade-build.log)
    exec 2>&1

# Check that this is a 64bit machine
uname -m | grep -q "64" || { echo "ERROR: A 64bit system is needed"; exit 1; }

# Get/set path of base dir to use, defaults to /home/$USER
if [[ -f /home/${USER}/.freedv-rade-build.cfg ]]; then
    if cat /home/${USER}/.freedv-rade-build.cfg|grep -v '^[#]'|grep -q "basedir="; then
        basedir=$(cat /home/${USER}/.freedv-rade-build.cfg|grep -v '^[#]'|grep 'basedir='|cut -d= -f2)
    else
        basedir=/home/$USER
    fi
else
    echo "basedir=/home/$USER" > /home/${USER}/.freedv-rade-build.cfg
    basedir=/home/$USER
fi

# Check permissions on target dir
touch ${basedir}/test_for_perms > /dev/null 2>&1 || { echo -e "Target folder $basedir is not writeable by $USER\n check permissions on this directory it may need ownership changing.\n"; exit 1; }
rm -f ${basedir}/test_for_perms

# Set default build dir name
builddir=freedv-rade

# Check we have space
(( $(df -hBG --output=avail $basedir |tr '\n' ' '|tr -s ' '|xargs|cut -d ' ' -f2|cut -dG -f1) > 3 )) || { echo "ERROR: You will need more than 3GB of free disk space in $basedir"; exit 1; }

# Check we have internet and DNS
ping -c3 google.com > /dev/null || { echo "ERROR: Failed to find internet connection or DNS"; exit 1; }

# Find out where we are
. /etc/os-release
echo -e "\nHello ${USER}, you seem to be using ${PRETTY_NAME}\n"
echo -e "Installation will be made into ${basedir}/${builddir}\n"

run_as_root() {
    local CMD="$*"

    if [ -z "$CMD" ]; then
        echo "run_as_root: No command provided." >&2
        return 1
    fi

    # Try passwordless sudo
    if command -v sudo >/dev/null 2>&1; then
        if sudo -n true 2>/dev/null; then
        # Passwordless or password already given and within timeout.
            echo "Running as root via sudo"
            sudo $CMD
            return $?
        elif sudo -v >/dev/null 2>&1; then
            echo "Running as root via sudo (with password prompt)"
            sudo $CMD
            return $?
        fi
    fi

    # Try su
    if command -v su >/dev/null 2>&1; then
        echo "Running as root via su"
        su -c "$CMD"
        return $?
    fi

    echo "Unable to gain root access via sudo or su." >&2
    return 1
}

# Install some system deps
case $ID in
    mageia)
    echo "Enter the root password if requested to install some initially needed dependencies"
    MGA_ID=$(echo $VERSION_ID|cut -d. -f1)
    if (( MGA_ID > 9 )); then
            run_as_root "urpmi git cmake wxGTK3-devel libsamplerate-devel libsndfile-devel speexdsp-devel hamlib-devel alsa-lib-devel \
            libao-devel gsm-devel gcc-c++ automake sox python3-virtualenv pulseaudio-devel hamlib-utils python3 python3-devel \
            fonts-ttf-google-noto-emoji-color" \
            || { echo "Deps install failed"; exit 1; }
    else
            run_as_root "urpmi git cmake wxGTK3-devel libsamplerate-devel libsndfile-devel speexdsp-devel hamlib-devel alsa-lib-devel \
            libao-devel gsm-devel gcc-c++ automake sox python3-virtualenv pulseaudio-devel hamlib-utils python3 python3-devel \
            google-noto-emoji-color-fonts" \
            || { echo "Deps install failed"; exit 1; }
    fi
    ;;
    opensuse-tumbleweed)
    echo "Enter the root password to install some initially needed dependencies"
    sudo zypper --non-interactive in --no-recommends cmake patch automake autoconf libtool wxGTK3-devel libsamplerate-devel \
            libsndfile-devel speexdsp-devel alsa-lib-devel libao-devel libgsm-devel gcc-c++ sox python3-virtualenv \
            pulseaudio-devel python3 python3-devel hamlib hamlib-devel google-noto-coloremoji-fonts \
            || { echo "Deps install failed"; exit 1; }
    ;;
    linuxmint)
    echo "Enter the root password to install some initially needed dependencies"
    MINT_ID=$(echo $VERSION_ID|cut -d. -f1)
    if (( MINT_ID == 22 )); then
            sudo apt install -y --no-install-recommends libspeexdsp-dev libsamplerate0-dev sox git libwxgtk3.2-dev libhamlib-dev \
            libasound2-dev libao-dev libgsm1-dev libsndfile1-dev cmake module-assistant build-essential python3-venv libpulse-dev \
            autoconf libtool python3-numpy-dev python3 python3-dev libhamlib-utils fonts-noto-color-emoji \
            || { echo "Deps install failed"; exit 1; }
    elif (( MINT_ID == 21 )); then
            sudo apt install -y --no-install-recommends libspeexdsp-dev libsamplerate0-dev sox git libwxgtk3.0-gtk3-dev libhamlib-dev \
            libasound2-dev libao-dev libgsm1-dev libsndfile1-dev cmake module-assistant build-essential python3-venv libpulse-dev \
            autoconf libtool python3-numpy python3 python3-dev libhamlib-utils fonts-noto-color-emoji \
            || { echo "Deps install failed"; exit 1; }
    else
        { echo "This Mint version is not yet supported, please create an isuue in github"; exit 1; }
    fi
    ;;
    fedora)
    echo "Enter the root password to install some initially needed dependencies"
        FC_ID=$(echo $VERSION_ID|cut -d. -f1)
        if (( FC_ID == 42 )); then
            sudo dnf5 install--setopt=install_weak_deps=False @development-tools git cmake wxGTK-devel libsamplerate-devel libsndfile-devel speexdsp-devel \
            hamlib-devel hamlib alsa-lib-devel libao-devel gsm-devel gcc-c++ sox python3-virtualenv pulseaudio-libs-devel libtool \
            python3-devel google-noto-emoji-color-fonts \
            || { echo "Deps install failed"; exit 1; }
        elif (( FC_ID == 41 )); then
            sudo dnf install --setopt=install_weak_deps=False @development-tools git cmake wxGTK-devel libsamplerate-devel \
            libsndfile-devel speexdsp-devel hamlib-devel hamlib alsa-lib-devel libao-devel gsm-devel gcc-c++ sox python3-virtualenv \
            pulseaudio-libs-devel libtool python3-devel google-noto-emoji-color-fonts \
            || { echo "Deps install failed"; exit 1; }

        else
            { echo "This Fedora version is not yet supported, please create an isuue in github"; exit 1; }
        fi
    ;;
    ubuntu)
    echo "Enter the root password to install some initially needed dependencies"
        UBUNTU_ID=$(echo $VERSION_ID|cut -d. -f1)
            sudo apt update
        if (( UBUNTU_ID >= 24 )); then
            sudo apt install -y --no-install-recommends libwxgtk3.2-dev python3-numpy-dev python3-venv libspeexdsp-dev libsamplerate0-dev sox git libhamlib-dev \
            libao-dev libasound2-dev libgsm1-dev libsndfile1-dev cmake module-assistant build-essential libpulse-dev autoconf libtool \
            python3 python3-dev libhamlib-utils fonts-noto-color-emoji automake || { echo "Deps install failed"; exit 1; }
        elif (( UBUNTU_ID >= 22 )); then
            sudo apt install -y --no-install-recommends libwxgtk3.0-gtk3-dev python3-numpy python3-venv libspeexdsp-dev libsamplerate0-dev sox git libhamlib-dev \
            libasound2-dev libao-dev libgsm1-dev libsndfile1-dev cmake module-assistant build-essential libpulse-dev autoconf libtool \
            python3 python3-dev libhamlib-utils fonts-noto-color-emoji automake || { echo "Deps install failed"; exit 1; }
        else
            { echo "This Ubuntu version is not yet supported, please create an isuue in github"; exit 1; }
        fi
    ;;
    debian)
    DEBIAN_ID=$(echo $VERSION_ID|cut -d. -f1)
    echo "Enter the root password if requested to install some initially needed dependencies"
        if (( DEBIAN_ID == 12 )); then
            run_as_root "apt install libspeexdsp-dev libsamplerate0-dev sox git libwxgtk3.2-dev libhamlib-dev libasound2-dev libao-dev \
                libgsm1-dev libsndfile1-dev cmake module-assistant build-essential python3-venv libpulse-dev autoconf libtool \
                python3-numpy-dev python3-dev libhamlib-utils fonts-noto-color-emoji automake" \
                || { echo "Deps install failed"; exit 1; }
        elif (( DEBIAN_ID == 11 )); then
            run_as_root "apt install libspeexdsp-dev libsamplerate0-dev sox git libwxgtk3.0-gtk3-dev libhamlib-dev libasound2-dev libao-dev \
                libgsm1-dev libsndfile1-dev cmake module-assistant build-essential python3-venv libpulse-dev autoconf libtool \
                python3-numpy-dev python3-dev libhamlib-utils fonts-noto-color-emoji automake" \
                || { echo "Deps install failed"; exit 1; }
        else
            { echo "This Debian version is not yet supported, please create an isuue in github"; exit 1; }

        fi
    ;;
    arch|garuda|endeavouros|arcolinux|rebornos)
    echo "Enter the root password to install some initially needed dependencies"

    run_as_root "pacman -Syu cmake gcc base-devel autoconf libtool automake git \
        python python-numpy speexdsp libsamplerate sox hamlib alsa-lib libao \
        libsndfile gsm noto-fonts-emoji" \
        || { echo 'Deps install failed'; exit 1; }

        # Only install PulseAudio if not on PipeWire
    if pacman -Q pipewire-pulse &>/dev/null; then
        echo "Using PipeWire for audio â€“ skipping pulseaudio"
    else
        echo "Installing pulseaudio..."
        run_as_root "pacman -S pulseaudio"
    fi

    echo "Checking for wxWidgets GTK3 support..."

    # Check if wxwidgets-gtk3 is already installed
    if ! pacman -Q wxwidgets-gtk3 &>/dev/null; then
        echo "wxwidgets-gtk3 not found in pacman. Attempting AUR install..."

        # Detect yay or paru
        if command -v yay &>/dev/null; then
            yay -S --needed wxwidgets-gtk3 || { echo "AUR install failed with yay"; exit 1; }
        elif command -v paru &>/dev/null; then
            paru -S --needed wxwidgets-gtk3 || { echo "AUR install failed with paru"; exit 1; }
        else
            echo "No AUR helper (yay or paru) found. Please install wxwidgets-gtk3 manually."
            exit 1
        fi
    else
        echo "wxwidgets-gtk3 is already installed."
    fi
    ;;
    manjaro)
    echo "Enter the root password to install some initially needed dependencies"
    run_as_root "pacman -S --needed cmake gcc base-devel autoconf automake libtool git python speexdsp libsamplerate sox \
    wxwidgets-gtk3 hamlib alsa-lib libao libsndfile python-virtualenv python-numpy manjaro-pulse gsm noto-fonts-emoji" \
            || { echo "Deps install failed"; exit 1; }
    ;;
#    pclinuxos)  # Hamlib package seems unmaintained here and build from git currently fails.
#    echo "Enter the root password to install some initially needed dependencies"
#    su -c "apt install automake autoconf libtool git cmake wxgtku3.2-devel libsamplerate-devel libsndfile-devel \
#           speexdsp-devel alsa-lib-devel libao-devel gsm-devel gcc-c++ sox python3 \
#           python3-devel pulseaudio-devel" \
#           || { echo "Deps install failed - try again later"; exit 1; }
#    ;;
    *)
    echo "Sorry $PRETTY_NAME is not yet supported."
    echo "Please create a github issue with details of your system."
    exit 0
    ;;
esac

# Create a build directory
mkdir -p ${basedir}/${builddir} || { echo "ERROR: mkdir ${basedir}/${builddir} failed"; exit 1; }

# Move into build dir
cd ${basedir}/${builddir} || { echo "ERROR: cd to ${basedir}/${builddir} failed"; exit 1; }

# Delete freedv-gui directory
rm -rf ${basedir}/${builddir}/freedv-gui || { echo "ERROR: removing old freedv-gui dir"; exit 1; }

# Get the latest freedv sources from github
echo Cloning freedv github repository...
git clone https://github.com/drowe67/freedv-gui.git || { echo "ERROR: git clone failed"; exit 1; }

# Move into source code directory
cd ${basedir}/${builddir}/freedv-gui || { echo "ERROR: cd to freedv-gui failed"; exit 1; }

# Create a python virtual environment with access to system python modules
if [[ $ID == "debug" ]] || [[ $ID == "linuxmint" ]] || [[ $ID == "fedora" ]] || [[ $ID == "ubuntu" ]] || [[ $ID == "debian" ]] || [[ $ID = "pclinuxos" ]]; then
    python3 -m venv rade-venv --system-site-packages || { echo "ERROR: create venv failed"; exit 1; }
else
# Exclude system modules
    python3 -m venv rade-venv || { echo "ERROR: create venv failed"; exit 1; }
fi

# Activate it
. ./rade-venv/bin/activate || { echo "ERROR: activate venv failed"; exit 1; }

# Clear cache in venv
pip cache purge
pip install --upgrade pip || echo "WARNING: pip upgrade failed"

# Install some python dependencies using pip
pip3 install torch torchaudio --index-url https://download.pytorch.org/whl/cpu || { echo "torch pip install failed"; exit 1; }

pip3 install matplotlib || { echo "ERROR: matplotlib pip install failed"; exit 1; }

if [[ $ID == "mageia" ]] || [[ $ID == "linuxmint" ]] || [[ $ID == "fedora" ]] || [[ $ID == "ubuntu" ]] || [[ $ID == "debian" ]]; then
pip3 install NumPy || { echo "ERROR: numpy pip install failed"; exit 1; }
fi

# Patches
#sed -i 's: -j$(nproc): -j4:' build_linux.sh
#patch -p1 < ../../freedv-rade-build/cores.patch && echo "cores.patch applied"

# Run the freedv build script
./build_linux.sh || { echo "ERROR: Build failed for some reason, check for errors above and run again later."; deactivate; exit 1; }

# Move back into build_linux
cd ${basedir}/${builddir}/freedv-gui/build_linux || { echo "ERROR: cd ${basedir}/${builddir}/freedv-gui/build_linux failed"; exit 1; }

# Create symlink 
ln -s "$(pwd)"/rade_src/model19_check3 model19_check3 || { echo "Failed to create symlink"; exit 1; }

# Deactivate venv
deactivate || echo "WARNING:Issue deactivating venv"

# Make start script
~/freedv-rade-build/mk-start ${basedir}/${builddir} || echo "WARNING: freedv-start script was not created (maybe exists?)"

# Make destop file
~/freedv-rade-build/mk-desktop || echo "WARNING: freedv desktop file was not created (maybe exists?)"

# Make Update desktop file
~/freedv-rade-build/mk-updt-desktop || echo "WARNING: Update-RADE desktop file was not created (maybe exists?)"

cd
echo -e "\n\n########### Build is complete \o/ ############\n\nYou can run it from your home folder using:\n\n \
      ./freedv-start [-f configfile]\n\n  OR  use the desktop FreeDV-RADE desktop icon."
