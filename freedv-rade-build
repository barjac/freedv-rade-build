#!/bin/bash
# This script tries to install the pre-release freedv-v2.00 from github on various linux distributions
# Check we are not root
((UID)) || { echo "You must NOT run $0 as root - aborting!"; exit 0; }

# Check that this is a 64bit machine
uname -m | grep -q "64" || { echo "Error: A 64bit system is needed"; exit 1; }

# Path of base dir to use
builddir=/home/$USER/freedv-rade

# Check we have space
(( $(df -hBG --output=avail /home |tr '\n' ' '|tr -s ' '|cut -d ' ' -f2|cut -dG -f1) > 3 )) || { echo "You will need more than 3GB of free disk space in $HOME"; exit 1; }

# Check we have internet and DNS
ping -c3 google.com > /dev/null || { echo "Failed to find internet connection or DNS"; exit 1; }

# Find out where we are
. /etc/os-release
echo -e "\nHello ${USER}, you seem to be using ${PRETTY_NAME}\n"

# Install some system deps
case $ID in
    mageia)
    echo "Enter the root password to install some initially needed dependencies"
    su -c "urpmi --no-recommends git cmake wxGTK3-devel libsamplerate-devel libsndfile-devel speexdsp-devel hamlib-devel alsa-lib-devel \
           libao-devel gsm-devel gcc-c++ sox python3-virtualenv pulseaudio-devel hamlib-utils" \
           || { echo "Deps install failed - try again later"; exit 1; }
    ;;
    linuxmint)
    echo "Enter the root password to install some initially needed dependencies"
    sudo apt install libspeexdsp-dev libsamplerate0-dev sox git libwxgtk3.2-dev libhamlib-dev libasound2-dev libao-dev \
           libgsm1-dev libsndfile1-dev cmake module-assistant build-essential python3.12-venv libpulse-dev autoconf libtool \
           python3-numpy-dev python3 python3-dev libhamlib-utils \
           || { echo "Deps install failed - try again later"; exit 1; }
    ;;
    fedora)
    echo "Enter the root password to install some initially needed dependencies"
    sudo dnf group install development-tools
    sudo dnf install --setopt=install_weak_deps=False git cmake wxGTK-devel libsamplerate-devel libsndfile-devel speexdsp-devel \
    hamlib-devel hamlib alsa-lib-devel libao-devel gsm-devel gcc-c++ sox python3-virtualenv pulseaudio-libs-devel libtool \
         python3-torchaudio python3-torch python3-devel \
           || { echo "Deps install failed - try again later"; exit 1; }
    ;;
    ubuntu)
    echo "Enter the root password to install some initially needed dependencies"
    sudo apt install libspeexdsp-dev libsamplerate0-dev sox git libwxgtk3.2-dev libhamlib-dev libasound2-dev libao-dev \
           libgsm1-dev libsndfile1-dev cmake module-assistant build-essential python3.12-venv libpulse-dev autoconf libtool \
           python3-numpy-dev python3 python3-dev libhamlib-utils \
           || { echo "Deps install failed - try again later"; exit 1; }
    ;;
    debian)
    echo "Enter the root password to install some initially needed dependencies"
    su -c "apt install libspeexdsp-dev libsamplerate0-dev sox git libwxgtk3.2-dev libhamlib-dev libasound2-dev libao-dev \
           libgsm1-dev libsndfile1-dev cmake module-assistant build-essential python3.11-venv libpulse-dev autoconf libtool \
           python3-numpy-dev python3-dev libhamlib-utils" \
           || { echo "Deps install failed - try again later"; exit 1; }
    ;;
    arch)
    echo "Enter the root password to install some initially needed dependencies"
    su -c "pacman -S --needed cmake gcc base-devel autoconf libtool git python speexdsp libsamplerate sox \
            wxwidgets-gtk3 hamlib alsa-lib libao libsndfile python-virtualenv python-numpy pulseaudio gsm" \
            || { echo "Deps install failed - try again later"; exit 1; }
    ;;
    manjaro)
    echo "Enter the root password to install some initially needed dependencies"
    su -c "pacman -S --needed cmake gcc base-devel autoconf libtool git python speexdsp libsamplerate sox \
            wxwidgets-gtk3 hamlib alsa-lib libao libsndfile python-virtualenv python-numpy manjaro-pulse gsm" \
            || { echo "Deps install failed - try again later"; exit 1; }
    ;;
#    pclinuxos)  # Hamlib package seems unmaintained here and build from git currently fails.
#    echo "Enter the root password to install some initially needed dependencies"
#    su -c "apt install automake autoconf libtool git cmake wxgtku3.2-devel libsamplerate-devel libsndfile-devel \
#           speexdsp-devel alsa-lib-devel libao-devel gsm-devel gcc-c++ sox python3 \
#           python3-devel pulseaudio-devel" \
#           || { echo "Deps install failed - try again later"; exit 1; }
#    ;;
    *)
    echo "Sorry I don't have packaging information for $PRETTY_NAME yet."
    echo "Please create an issue with details of your system."
    exit 0
    ;;
esac

# Create a base working directory in home
mkdir -p $builddir || { echo "mkdir $builddir failed"; exit 1; }

# Move into base dir
cd $builddir || { echo "cd to $builddir failed"; exit 1; }

# Delete freedv-gui directory
rm -rf ${builddir}/freedv-gui || { echo "Error: removing old freedv-gui dir"; exit 1; }

# Get the latest freedv sources from github
echo Cloning freedv github repository...
git clone https://github.com/drowe67/freedv-gui.git || { echo "git clone failed"; exit 1; }

# Move into source code directory
cd ${builddir}/freedv-gui || { echo "cd to freedv-gui failed"; exit 1; }

# Change to the RADE branch
git checkout v2.0-dev || { echo "checkout v2.0 failed"; exit 1; }

# Create a python virtual environment with access to system python modules
if [[ $ID == "linuxmint" ]] || [[ $ID == "fedora" ]] || [[ $ID == "ubuntu" ]] || [[ $ID == "debian" ]] || [[ $ID = "pclinuxos" ]]; then
    python3 -m venv rade-venv --system-site-packages || { echo "create venv failed"; exit 1; }
else
# Exclude system modules
    python3 -m venv rade-venv || { echo "create venv failed"; exit 1; }
fi

# Activate it
. ./rade-venv/bin/activate || { echo "activate venv failed"; exit 1; }

# Clear cache in venv
pip cache purge

# Install some python dependencies using pip
if [[ $ID != "fedora" ]]; then
pip3 install torch torchaudio --index-url https://download.pytorch.org/whl/cpu || { echo "torch pip install failed"; exit 1; }
fi
pip3 install matplotlib || { echo "matplotlib pip install failed"; exit 1; }
if [[ $ID == "linuxmint" ]] || [[ $ID == "fedora" ]] || [[ $ID == "ubuntu" ]] || [[ $ID == "debian" ]]; then
pip3 install NumPy || { echo "numpy pip install failed"; exit 1; }
fi
# Run the freedv build script
./build_linux.sh || { echo "Build failed for some reason, check for errors above and run again later if a download failed"; deactivate; exit 1; }

# Deactivate venv
deactivate

# Move back into the build directory
cd ${builddir}/freedv-gui/build_linux || { echo "cd $builddir/freedv-gui/build_linux failed"; exit 1; }

# Create symlink 
ln -s "$(pwd)"/rade_src/model19_check3 model19_check3 || { echo "Failed to create symlink"; exit 1; }

# Make start script
~/freedv-rade-build/mk-start  || echo "WARNING: 'freedv-start' script was not created (maybe exists?)"

# Make destop file
~/freedv-rade-build/mk-desktop || echo "WARNING: Desktop file was not created (maybe exists?)"

# Make Update desktop file
~/freedv-rade-build/mk-updt-desktop || echo "WARNING: Update-RADE desktop file was not created (maybe exists?)"

cd
echo -e "\n########### Build is complete \o/ ############\nYou can run it from your home folder using:\n \
      ./freedv-start [-f configfile]  OR  use the desktop FreeDV-RADE desktop icon."
